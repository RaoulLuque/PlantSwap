[project]
name = "PlantSwap"
version = "0.3.0"
description = "WebApp to swap plants with other people"
authors = ["Raoul Luqu√© <raoulsluque@gmail.com>"]
readme = "README.md"
requires-python = "<4.0,>=3.11"
packages = [{ include = "app" }]
dependencies = [
    "annotated-types==0.7.0",
    "anyio==4.6.2.post1",
    "bcrypt==4.2.0",
    "certifi==2024.8.30",
    "click==8.1.7",
    "coverage==7.6.4",
    "dnspython==2.7.0",
    "email-validator==2.2.0",
    "fastapi==0.115.2",
    "fastapi-cli==0.0.5",
    "greenlet==3.1.1",
    "h11==0.14.0",
    "httpcore==1.0.6",
    "httptools==0.6.2",
    "httpx==0.27.2",
    "idna==3.10",
    "iniconfig==2.0.0",
    "invoke==2.2.0",
    "jinja2==3.1.4",
    "markdown-it-py==3.0.0",
    "markupsafe==3.0.1",
    "mdurl==0.1.2",
    "packaging==24.1",
    "passlib==1.7.4",
    "pluggy==1.5.0",
    "psycopg==3.2.3",
    "psycopg-binary==3.2.3",
    "pydantic==2.9.2",
    "pydantic-settings==2.5.2",
    "pydantic-core==2.23.4",
    "pygments==2.18.0",
    "pyjwt==2.9.0",
    "python-dotenv==1.0.1",
    "python-multipart==0.0.12",
    "pyyaml==6.0.2",
    "rich==13.9.2",
    "shellingham==1.5.4",
    "sniffio==1.3.1",
    "sqlmodel==0.0.22",
    "starlette==0.40.0",
    "typer==0.12.5",
    "typing-extensions==4.12.2",
    "uvicorn==0.31.1",
    "uvloop==0.21.0",
    "watchfiles==0.24.0",
    "websockets==13.1",
    "types-passlib>=1.7.7.20240819",
    "sqlalchemy>=2.0.35",
]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = """
--doctest-modules --junitxml=reports/test-results.xml
--cov=app --cov-report=xml:reports/coverage-summary.xml
--cov-report=html:reports/html_dir
--cov-report=lcov:reports/lcov.info
--cov-report term-missing
"""
testpaths = [
    "app/tests",
]

[tool.coverage.run]
data_file = 'reports/.coverage'
omit = [
    # omit anything in a "tests" directory anywhere
    "*/tests/*",
]

[tool.uv]
dev-dependencies = [
    "pytest==8.3.3",
    "pytest-cov==5.0.0",
    "pytest-mock<4.0.0,>=3.14.0",
    "pytest-asyncio<1.0.0,>=0.24.0",
    "ruff<1.0.0,>=0.7.3",
    "mypy>=1.13.0",
]

[tool.poe.tasks]
test-run.help = "Run tests using pytest. Results are found in reports/"
test-run.cmd = "pytest --ignore=app/tests/compose"

test.help = "Execute db and test-run tasks in sequence: Run tests using pytest and reset db before"
test.sequence = ["db", "test-run"]

compose.help = "Start the applications' services containerized using docker compose up"
compose.cmd = "docker compose -f docker-compose.yml up"

compose-build.help = "Build the applications' services containerized using docker compose build"
compose-build.cmd = "docker compose build"

compose-clean.help = "Delete the applications' (compose) containers and volumes to completely reset the application using docker compose down"
compose-down.shell = """
docker compose down -v
"""

compose-test.help = "Run tests using pytest in a containerized environment using docker compose"
compose-test.cmd = "docker compose up"

dev.help = "Start the applicatoin in development mode with reloading enabled and log configuration as specified in log_config.json"
dev.cmd = "uvicorn app.main:app --reload --log-config log_config.json --reload-dir app --host 0.0.0.0 --port 8000"

deploy.help = "Start the application with reloading disabled and log configuration as specified in log_config.json"
deploy.cmd = "uvicorn app.main:app --log-config log_config.json --host 0.0.0.0 --port 8000"

ruff.help = "Check codebaes using ruff"
ruff.cmd = "ruff check --output-format=concise ."

format.help = "Format code with ruff"
format.cmd = "ruff format ."

types.help = "Statically check types using mypy"
types.cmd = "mypy --cache-fine-grained app"

checks.help = "Execute ruff, format and types tasks in sequence: Run ruff checks, formats and mypy"
checks.sequence = ["ruff", "format", "types"]

db.shell = """
docker stop $(docker ps -a -q)
docker rm $(docker ps -a -q)
docker run --name plantswap-postgres-single -e POSTGRES_PASSWORD=$POSTGRES_PASSWORD -d -p 5432:5432 postgres
"""
db.help = "Stops and removes all running containers and starts a new postgres container from the postgres image"
db.envfile = ".env"
